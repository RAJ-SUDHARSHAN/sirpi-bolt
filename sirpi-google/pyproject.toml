[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "sirpi-google"
version = "1.0.0"
description = "Multi-Agent Infrastructure Deployment Platform using Google Cloud ADK"
authors = [
    {name = "Sirpi Team", email = "team@sirpi.dev"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
keywords = ["fastapi", "agents", "deployment", "google-cloud", "adk", "infrastructure"]

dependencies = [
    # FastAPI and Web Framework
    "fastapi[standard]>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    # Database and ORM
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.1",
    "psycopg2-binary>=2.9.9",
    "asyncpg>=0.29.0", # For async operations if needed
    # Google Cloud and ADK
    "google-cloud-aiplatform>=1.38.1",
    "google-cloud-storage>=2.10.0",
    "google-cloud-firestore>=2.13.1",
    "google-cloud-secret-manager>=2.17.0",
    "google-auth>=2.23.4",
    "google-auth-oauthlib>=1.1.0",
    # LLM Integration
    "portkey-ai>=1.6.3",
    "openai>=1.3.7",
    # Authentication and Security
    "clerk-backend-api>=0.1.0",
    "cryptography>=41.0.8",
    "passlib[bcrypt]>=1.7.4",
    "svix>=1.15.0", # For Clerk webhook verification
    # HTTP and API
    "httpx>=0.25.2",
    "requests>=2.31.0",
    "aiohttp>=3.9.1",
    # GitHub App Authentication
    "pyjwt[crypto]>=2.8.0",
    # Data Processing
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    # Utilities
    "python-slugify>=8.0.1",
    "jinja2>=3.1.2",
    "pyyaml>=6.0.1",
    # Background Tasks
    "celery>=5.3.4",
    "redis>=5.0.1",
]

[project.optional-dependencies]
dev = [
    # Development and Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",  # For testing FastAPI endpoints
    
    # Code Quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "ruff>=0.1.6",
    
    # Development Tools
    "pre-commit>=3.5.0",
    "watchfiles>=0.21.0",
]

production = [
    # Production Server
    "gunicorn>=21.2.0",
    
    # Monitoring and Logging
    "sentry-sdk[fastapi]>=1.38.0",
    "structlog>=23.2.0",
    
    # Performance
    "orjson>=3.9.10",  # Faster JSON serialization
]

[project.urls]
Homepage = "https://github.com/sirpi/sirpi-google"
Documentation = "https://docs.sirpi.dev"
Repository = "https://github.com/sirpi/sirpi-google"
Changelog = "https://github.com/sirpi/sirpi-google/blob/main/CHANGELOG.md"

[project.scripts]
sirpi-google = "app.main:main"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | alembic/versions
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_glob = ["alembic/versions/*.py"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
exclude = [
    "alembic/",
    "tests/",
]

[[tool.mypy.overrides]]
module = [
    "clerk_backend_api.*",
    "portkey_ai.*",
    "google.cloud.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "alembic/versions",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py files

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 
